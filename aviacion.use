model aviacion

-------------- Clases ------------------
class Avion
  attributes
    numVuelos : Integer derive :
      self.vuelo->size()
    kilometrosRecorridos : Real derive : 
      self.vuelo->iterate(v ; res : Real = 0.0 |
      res + v.numKilometros
      )
end

class Aerolinea
  attributes
    nombre : String -- Tiene que ser distino (invariante)
end

associationclass Contrato between
  Avion[0..*] role avion
  Aerolinea[1..*] role aerolinea
  attributes
    numMeses : Integer
    precioMes : Real
    precioTotal : Real derive : -- DERIVED
      self.numMeses * self.precioMes
end

class Aeropuerto
end

class Hangar
  attributes
    capacidad : Integer
end

class Desguace
attributes
  capacidad : Integer
end

class Ciudad
attributes
  nombre : String
end

class Persona
attributes
  nombre : String
  edad : Integer
end

class Piloto < Persona
  attributes
     kilometrosVolados : Real derive: --DERIVED
      self.vueloPrincipal->collect(v | v.numKilometros)->sum() + 
      self.vueloSecundario->collect(v | v.numKilometros)->sum()
    esPro : Boolean derive :
      self.vueloPrincipal->size() >= 1000 and
      self.vueloSecundario->size() >= 2000
    numeroDeVuelos : Integer derive : 
      self.vueloPrincipal->size() +
      self.vueloSecundario->size()
end

class Vuelo
  attributes
    id : String
    numKilometros : Real
end

-------------Fin de Clases--------


----------Asociaciones---------------
composition HangarEnAeropuerto between
  Aeropuerto[1] role aeropuerto
  Hangar[0..*] role hangar
end

composition DesguaceEnAeropuerto between
  Aeropuerto[1] role aeropuerto
  Desguace[0..1] role desguace
end

association AeropuertoEnCiudad between
  Aeropuerto[0..1] role aeropuerto
  Ciudad[1] role ciudad
end

association VueloRealizado between
  Avion[1] role avion
  Vuelo[0..*] role vuelo
end

association PilotoPrincipal between
  Piloto[1] role pilotoPrincipal
  Vuelo[0..*] role vueloPrincipal
end

association PilotoSecundario between
  Piloto[0..1] role pilotoSecundario
  Vuelo[0..*] role vueloSecundario
end

association Trabajar between
  Piloto[0..*] role piloto
  Aerolinea[0..2] role aerolinea
end

association Volar between
  Persona[0..*] role pasajero
  Vuelo[0..*] role lleva
end

association AvionEnHangar between
  Avion[0..*] role avionEstacionado
  Hangar[0..1] role contiene
end

association AvionEnDesguace between
  Avion[0..*] role avionRelegado
  Desguace[0..1] role incluye
end
----------Fin de Asociaciones-------------


----------Clases de asociación----------

----------Fin de Clases de Asociación----------


----------Invariantes (Restricciones de integridad)----------
constraints

context Aerolinea
-- Las aerolíenas deben tener nombres distintos
inv nombreDistinto : 
  Aerolinea.allInstances()->forAll(a1, a2 | a1 <> a2 implies a1.nombre <> a2.nombre)

context Avion
-- Un avión no puede estar en un hangar y en un desguace a la vez
inv SiEstaEnHangarNoEstaEnDesguace : 
  not (self.contiene->notEmpty() and self.incluye->notEmpty())

context Desguace 
-- Los aviones en desguace deben tener más de 1000 vuelos
inv avionEnDesguace1000Viajes :
  self.avionRelegado->forAll(a | a.numVuelos >= 1000)
  -- Versión de prueba del invariante anterior para comprobar que funciona
inv avionEnDesguace2Viajes :
  self.avionRelegado->forAll(a | a.numVuelos >= 2)
-- Los desguaces no pueden tener más aviones de su capacidad
inv avionesEnDesguaceMenorACapacidad : 
  self.avionRelegado->size() <= self.capacidad

context Hangar 
-- Los hangares no pueden tener más aviones de su capacidad
inv avionesEstacionadosMenorACapacidad : 
  self.avionEstacionado->size() <= self.capacidad

context Vuelo 
-- Los pilotos principal y secundario deben ser personas distintas
inv pilotosDistintos : 
  self.pilotoPrincipal <> self.pilotoSecundario
inv identificadorUnico :
  Vuelo.allInstances()->forAll(v1, v2 | v1 <> v2 implies v1.id <> v2.id)
